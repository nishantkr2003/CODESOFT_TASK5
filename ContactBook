import tkinter as tk
from tkinter import messagebox

class ContactManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Manager")

        self.contacts = []

        # Labels and Entry widgets for contact details
        self.name_label = tk.Label(root, text="Name:")
        self.name_label.pack()
        self.name_entry = tk.Entry(root, width=40)
        self.name_entry.pack()

        self.phone_label = tk.Label(root, text="Phone Number:")
        self.phone_label.pack()
        self.phone_entry = tk.Entry(root, width=40)
        self.phone_entry.pack()

        self.email_label = tk.Label(root, text="Email:")
        self.email_label.pack()
        self.email_entry = tk.Entry(root, width=40)
        self.email_entry.pack()

        self.address_label = tk.Label(root, text="Address:")
        self.address_label.pack()
        self.address_entry = tk.Entry(root, width=40)
        self.address_entry.pack()

        
        self.add_button = tk.Button(root, text="Add Contact", command=self.add_contact)
        self.add_button.pack()

        self.view_button = tk.Button(root, text="View Contacts", command=self.view_contacts)
        self.view_button.pack()

        self.search_button = tk.Button(root, text="Search Contact", command=self.search_contact)
        self.search_button.pack()

        self.update_button = tk.Button(root, text="Update Contact", command=self.update_contact)
        self.update_button.pack()

        self.delete_button = tk.Button(root, text="Delete Contact", command=self.delete_contact)
        self.delete_button.pack()

        self.exit_button = tk.Button(root, text="Exit", command=root.quit)
        self.exit_button.pack()

    def add_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()
        email = self.email_entry.get()
        address = self.address_entry.get()
        if name and phone:
            contact = {
                "Name": name,
                "Phone Number": phone,
                "Email": email,
                "Address": address,
            }
            self.contacts.append(contact)
            messagebox.showinfo("Success", "Contact added successfully.")
            self.clear_entries()
        else:
            messagebox.showwarning("Warning", "Name and Phone Number are required.")

    def view_contacts(self):
        if self.contacts:
            contact_list = "\n".join([f"{contact['Name']}: {contact['Phone Number']}" for contact in self.contacts])
            messagebox.showinfo("Contacts", contact_list)
        else:
            messagebox.showinfo("Contacts", "No contacts found.")

    def search_contact(self):
        search_query = self.name_entry.get()
        if search_query:
            found_contacts = [contact for contact in self.contacts if search_query in contact["Name"] or search_query in contact["Phone Number"]]
            if found_contacts:
                contact_list = "\n".join([f"{contact['Name']}: {contact['Phone Number']}" for contact in found_contacts])
                messagebox.showinfo("Search Results", contact_list)
            else:
                messagebox.showinfo("Search Results", "No matching contacts found.")
        else:
            messagebox.showwarning("Warning", "Please enter a search query.")

    def update_contact(self):
        search_query = self.name_entry.get()
        if search_query:
            found_contacts = [contact for contact in self.contacts if search_query in contact["Name"]]
            if found_contacts:
                
                contact_to_update = found_contacts[0]
                contact_to_update["Phone Number"] = self.phone_entry.get()
                contact_to_update["Email"] = self.email_entry.get()
                contact_to_update["Address"] = self.address_entry.get()
                messagebox.showinfo("Success", "Contact updated successfully.")
                self.clear_entries()
            else:
                messagebox.showinfo("Update Contact", "No matching contact found for updating.")
        else:
            messagebox.showwarning("Warning", "Please enter a search query.")

    def delete_contact(self):
        search_query = self.name_entry.get()
        if search_query:
            found_contacts = [contact for contact in self.contacts if search_query in contact["Name"]]
            if found_contacts:
                
                contact_to_delete = found_contacts[0]
                self.contacts.remove(contact_to_delete)
                messagebox.showinfo("Success", "Contact deleted successfully.")
                self.clear_entries()
            else:
                messagebox.showinfo("Delete Contact", "No matching contact found for deletion.")
        else:
            messagebox.showwarning("Warning", "Please enter a search query.")

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.address_entry.delete(0, tk.END)

def main():
    root = tk.Tk()
    app = ContactManagerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
